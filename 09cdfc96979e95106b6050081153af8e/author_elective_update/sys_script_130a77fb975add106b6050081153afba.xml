<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="DELETE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_803922_demo_slac_event_payload</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_803922_demo_slac_event_payload">userISNOTEMPTY^EQ<item endquery="false" field="user" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Check User</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	/* Given a new record in the Event Payloads table,
	 * Check to see if the user is already defined in the Slack Users table, or
	 * Create a new user if not already defined.
	 */
	var grUser, si, slack_id, slack_user_profile, user_sys_id;
	
	si = new x_803922_demo_slac.Slacker();
	slack_id = current.getValue( 'user' );
	
	si.debug( 'User sys_id: ' + si.update_user( 'U044TMU1KMJ' ) );
	
	
	
	return;
	
	
	
	si.debug( 'Checking the user: ' + slack_id );

	try{

		grUser = new GlideRecord( si.table_users );
		grUser.addQuery( 'slack_username', slack_id );
		grUser.query();

		if( grUser.next() ){
			user_sys_id = grUser.getUniqueValue();				
		}
		else{
			si.debug( 'The slacker user ' + slack_id + ' was not found in ServiceNow. Creating a new user.' );
			
			user_sys_id = si.update_user( slack_id );
			
			si.send_message( current, 'Congratulations on posting your first message <@' + slack_id + '>++' );
		}

		return user_sys_id;
	}
	catch( e ){
		si.error( 'An error occurred trying to update or create the user in the ' +	si.table_users + ' table.', e );
		return null;
	}
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>john.dahl</sys_created_by>
        <sys_created_on>2022-10-09 22:07:07</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>130a77fb975add106b6050081153afba</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>Check User</sys_name>
        <sys_overrides/>
        <sys_package display_value="Demo Slacker" source="x_803922_demo_slac">09cdfc96979e95106b6050081153af8e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Demo Slacker">09cdfc96979e95106b6050081153af8e</sys_scope>
        <sys_update_name>sys_script_130a77fb975add106b6050081153afba</sys_update_name>
        <sys_updated_by>john.dahl</sys_updated_by>
        <sys_updated_on>2022-10-10 13:35:44</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="DELETE" query="documentkey=130a77fb975add106b6050081153afba"/>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Demo Slacker">09cdfc96979e95106b6050081153af8e</application>
        <file_path/>
        <instance_id>fea09001db5a1300ff27d5b0cf961905</instance_id>
        <instance_name>dev60079</instance_name>
        <name>sys_script_130a77fb975add106b6050081153afba</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;false&lt;/action_update&gt;&lt;active&gt;false&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;x_803922_demo_slac_event_payload&lt;/collection&gt;&lt;condition/&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition table="x_803922_demo_slac_event_payload"&gt;userISNOTEMPTY^EQ&lt;item endquery="false" field="user" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;Check User&lt;/name&gt;&lt;order&gt;100&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {

	/* Given a new record in the Event Payloads table,
	 * Check to see if the user is already defined in the Slack Users table, or
	 * Create a new user if not already defined.
	 */
	var grUser, si, slack_id, slack_user_profile, user_sys_id;
	
	si = new x_803922_demo_slac.Slacker();
	slack_id = current.getValue( 'user' );
	
	si.debug( 'User sys_id: ' + si.update_user( 'U044TMU1KMJ' ) );
	
	
	
	return;
	
	
	
	si.debug( 'Checking the user: ' + slack_id );

	try{

		grUser = new GlideRecord( si.table_users );
		grUser.addQuery( 'slack_username', slack_id );
		grUser.query();

		if( grUser.next() ){
			user_sys_id = grUser.getUniqueValue();				
		}
		else{
			si.debug( 'The slacker user ' + slack_id + ' was not found in ServiceNow. Creating a new user.' );
			
			user_sys_id = si.update_user( slack_id );
			
			si.send_message( current, 'Congratulations on posting your first message &lt;@' + slack_id + '&gt;++' );
		}

		return user_sys_id;
	}
	catch( e ){
		si.error( 'An error occurred trying to update or create the user in the ' +	si.table_users + ' table.', e );
		return null;
	}
	
})(current, previous);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;john.dahl&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2022-10-09 22:07:07&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;130a77fb975add106b6050081153afba&lt;/sys_id&gt;&lt;sys_mod_count&gt;8&lt;/sys_mod_count&gt;&lt;sys_name&gt;Check User&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Demo Slacker" source="x_803922_demo_slac"&gt;09cdfc96979e95106b6050081153af8e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Demo Slacker"&gt;09cdfc96979e95106b6050081153af8e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_130a77fb975add106b6050081153afba&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;john.dahl&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-10-10 13:35:44&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;after&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=130a77fb975add106b6050081153afba"/&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1761196334</payload_hash>
        <record_name>Check User</record_name>
        <reverted_from/>
        <source>e473599797921d106b6050081153af5c</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>john.dahl</sys_created_by>
        <sys_created_on>2022-10-10 13:35:45</sys_created_on>
        <sys_id>560fcf4097e211106b6050081153afa9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>183c21bcc400000001</sys_recorded_at>
        <sys_updated_by>john.dahl</sys_updated_by>
        <sys_updated_on>2022-10-10 13:35:45</sys_updated_on>
        <type>Business Rule</type>
        <update_guid>9a0fcf4041e2111072571f05a30beba8</update_guid>
        <update_guid_history>9a0fcf4041e2111072571f05a30beba8:-1761196334,4e4d038880a21110dcbe5db01f651ac8:1530788609,16bcc74c16a21110376770a782aabe9b:-1856097162,1e7c834c77a2111073a2b208169c531a:-1605972488,c594fac8822211100ead7ce59a3d2ca8:1978994313,47dd777fc25add1090b3362b932390e0:-1940581701,d38b777f085add10f4e5514f6fc0cf6a:-1280252466,154bfffbd65add10f1295df879f49fad:314852827,9f7a3f3b595add102b45e5bd66fe8de9:-1338882938</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>john.dahl</sys_created_by>
        <sys_created_on>2022-10-10 13:37:15</sys_created_on>
        <sys_db_object display_value="" name="sys_script">sys_script</sys_db_object>
        <sys_id>9e7be6a1b0b744a0abdb10a668df1440</sys_id>
        <sys_metadata>130a77fb975add106b6050081153afba</sys_metadata>
        <sys_name>Check User</sys_name>
        <sys_package display_value="Demo Slacker" source="x_803922_demo_slac">09cdfc96979e95106b6050081153af8e</sys_package>
        <sys_parent display_value="Event Payload">2028d55a9712d5106b6050081153af49</sys_parent>
        <sys_policy/>
        <sys_scope display_value="Demo Slacker">09cdfc96979e95106b6050081153af8e</sys_scope>
        <sys_scope_delete display_value="">2d78592dfadd4bcb8eb55a40bef05bd9</sys_scope_delete>
        <sys_update_name>sys_script_130a77fb975add106b6050081153afba</sys_update_name>
        <sys_update_version display_value="sys_script_130a77fb975add106b6050081153afba">560fcf4097e211106b6050081153afa9</sys_update_version>
    </sys_metadata_delete>
</record_update>
