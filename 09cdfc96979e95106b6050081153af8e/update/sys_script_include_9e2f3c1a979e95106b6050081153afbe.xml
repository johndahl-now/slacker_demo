<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_803922_demo_slac.Slacker</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The main API for interacting with the Slack application.</description>
        <name>Slacker</name>
        <script><![CDATA[var Slacker = Class.create();
Slacker.prototype = {
    initialize: function(){
		this.app_scope = gs.getCurrentScopeName();
		this.table_users = this.app_scope + '_users';
		this.table_payload = this.app_scope + '_event_payload',
		this.table_command = this.app_scope + '_command',
		this.property_slacker_token = gs.getProperty( this.app_scope + '.slacker.token' );
    },

    type: 'Slacker',
	
	get_user_name: function( userid ){
		var gr = new GlideRecord( this.table_users );
		gr.addQuery( 'slack_username', userid );
		gr.query();
		
		if( gr.next() ){
			return gr.getValue( 'first_name' ) + ' ' + gr.getValue( 'last_name' );
		}
		
		return null;
	},
	
	send_message: function( grPayload, text, force_thread ){
		var message, requestMessage;
		
		try{
			requestMessage = new sn_ws.RESTMessageV2();
			requestMessage.setHttpMethod( 'POST' );
			requestMessage.setEndpoint( 'https://slack.com/api/chat.postMessage' );
			requestMessage.setRequestHeader( 'Content-Type', 'application/x-www-form-urlencoded' );
			requestMessage.setRequestHeader( 'Authorization', 'Bearer ' + this.property_slacker_token );


			message = [ '&channel=' + gs.urlEncode( grPayload.getValue( 'channel' ) ) ];
			
			if( !grPayload.thread.nil() ){
				message.push( '&thread_ts=' + gs.urlEncode( grPayload.getValue( 'thread' ) ) );
			} 
			else if( force_thread ){
				message.push( '&thread_ts=' + gs.urlEncode( grPayload.getValue( 'timestamp' ) ) );
			}
			
			message.push( '&text=' + gs.urlEncode( text ) );
			
			requestMessage.setRequestBody( message.join('') );
			return requestMessage.execute();
			
		}
		catch( e ){
			gs.error( 'Slacker: An error occurred sending a message to Slack.\nError: ' + e.name + ': ' + e.message );
			return null;
		}
	},
	
	check_user: function( slack_id ){
		/* Make sure the Slack user that sent a message has a matching user record in ServiceNow. */
		var response, response_body, requestMessage, slack_user_data, user_sys_id;
		
		try{	// Get the user's profile information from Slack
			
			requestMessage = new sn_ws.RESTMessageV2();
			requestMessage.setHttpMethod('GET');
			requestMessage.setRequestHeader( 'Content-Type', 'application/x-www-form-urlencoded' );
			requestMessage.setRequestHeader( 'Authorization', 'Bearer ' + this.property_slacker_token );
			requestMessage.setEndpoint( 'https://slack.com/api/users.profile.get?user=' + slack_id );
			response = requestMessage.execute();
			
			slack_user_data = JSON.parse( response.getBody() ).profile;
			
		}
		catch( e ){
			gs.error( 'Slacker: An error occurred retrieving user information from Slack.\nError: ' + e.name + ': ' + e.message );
			return null;
		}

		try{	// Check to see if the user already has a record in ServiceNow or create one

			grUser = new GlideRecord( this.table_users );
			grUser.addQuery( 'slack_username', slack_id );
			grUser.query();

			if( grUser.next() ){
				user_sys_id = grUser.getUniqueValue();
				grUser.setValue( 'email', slack_user_data.email );
				grUser.setValue( 'first_name', slack_user_data.first_name );
				grUser.setValue( 'last_name', slack_user_data.last_name );
				grUser.setValue( 'phone', slack_user_data.phone );
				grUser.setValue( 'title', slack_user_data.title );
				grUser.update();
			}
			else{
				grUser.initialize();
				grUser.setValue( 'slack_username', slack_id );
				grUser.setValue( 'email', slack_user_data.email );
				grUser.setValue( 'first_name', slack_user_data.first_name );
				grUser.setValue( 'last_name', slack_user_data.last_name );
				grUser.setValue( 'phone', slack_user_data.phone );
				grUser.setValue( 'title', slack_user_data.title );
				user_sys_id = grUser.insert();
			}
			
			return user_sys_id;
		}
		catch( e ){
			gs.error( 'Slacker: An error occurred trying to update or create the user in the ' + this.table_users + ' table.\nError: ' + e.name + ': ' + e.message );
			return null;
		}
		
	},
	
	isBotMessage: function( payload ){
		return payload.event.bot_id !== undefined;
	},
	
	get_slack_user: function(){
		


	}
	
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>john.dahl</sys_created_by>
        <sys_created_on>2022-10-04 16:39:13</sys_created_on>
        <sys_id>9e2f3c1a979e95106b6050081153afbe</sys_id>
        <sys_name>Slacker</sys_name>
        <sys_package display_value="Demo Slacker" source="x_803922_demo_slac">09cdfc96979e95106b6050081153af8e</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Demo Slacker">09cdfc96979e95106b6050081153af8e</sys_scope>
        <sys_update_name>sys_script_include_9e2f3c1a979e95106b6050081153afbe</sys_update_name>
    </sys_script_include>
</record_update>
