<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_803922_demo_slac.Slacker</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The main API for interacting with the Slack application.</description>
        <name>Slacker</name>
        <script><![CDATA[var Slacker = Class.create();
Slacker.prototype = {
    initialize: function(){
		this.app_scope = gs.getCurrentScopeName();
		this.table_users = this.app_scope + '_users';
		this.table_payload = this.app_scope + '_event_payload',
		this.table_command = this.app_scope + '_command',
		this.property_slacker_token = gs.getProperty( this.app_scope + '.slacker.token' );
		this.property_debug = this.check_boolean( gs.getProperty( this.app_scope + '.debug' ) );
		if( this.property_debug ){ this.debug( 'Debugging enabled' ); }
    },

    type: 'Slacker',
	
	call_slack: function( http_method, api_method, payload, content_type ){
		/* Given the parapmeters for a REST API call,
		 * Call the Slack API method with the payload and 
		 * return the response as a string.
		 */
		var request, response, token;
		token = this.property_slacker_token;
		
		switch( content_type ){
			case 'json':
				content_type = 'application/json';
				break;
			case 'text':
				content_type = 'application/text';
				break;
			default:
				content_type = 'application/x-www-form-urlencoded';
		}
		
		this.debug( 'API Request payload: ' + payload );
		
		try{
			request = new sn_ws.RESTMessageV2();
			request.setHttpMethod( http_method );
			request.setRequestHeader( 'Content-Type', content_type );
			request.setRequestHeader( 'Authorization', 'Bearer ' + token );
			request.setEndpoint( 'https://slack.com/api/' + api_method + '?' + payload );
			response = request.execute().getBody();
			this.debug( 'API Response: ' + response );

			return response;
		}
		catch( e ){
			this.error( 
				'An error occurred trying to call a Slack API.\nHTTP Method: ' + 
				http_method + '\nAPI Method: ' + api_method + '\nPayload: ' + payload 
			);
			return null;
		}
	},
	
	update_user: function( slack_id ){
		var existing_user, grUser, slack_user_profile, user_sys_id;
		
		slack_user_profile = JSON.parse( this.get_slack_user_profile( slack_id ) );
		
		this.debug( 'Update User: Slack Profile: ' + JSON.stringify( slack_user_profile, null, 2 ) );
		
		grUser = new GlideRecord( this.table_users );
		grUser.addQuery( 'slack_username', slack_id );	
		grUser.query();
		
		existing_user = grUser.next();
		
		if( !existing_user ){
			this.debug( 'Initializing a new record.' );
			
			grUser.initialize();
			grUser.setValue( 'slack_username', slack_id );
			grUser.setValue( 'points_total', 0 );
		}
		
		grUser.setValue( 'email', slack_user_profile.email );
		grUser.setValue( 'first_name', slack_user_profile.first_name );
		grUser.setValue( 'last_name', slack_user_profile.last_name );
		grUser.setValue( 'phone', slack_user_profile.phone );
		grUser.setValue( 'slack_profile', JSON.stringify( slack_user_profile ) );
		grUser.setValue( 'title', slack_user_profile.title );
		grUser.setValue( 'display_name', slack_user_profile.display_name || 
						[ slack_user_profile.first_name, slack_user_profile.last_name ].join(' ') );
		
		if( existing_user ){
			this.debug( 'Updating an existing record.' );
			
			user_sys_id = grUser.update();
		}
		else{
			this.debug( 'Inserting the new record.' );
			
			user_sys_id = grUser.insert();
		}
		
		return user_sys_id;
	},

	get_slack_user_profile: function( slack_id ){
		var apiMethod, httpMethod, payload, response;
		
		httpMethod = 'GET';
		apiMethod = 'users.profile.get';
		payload = 'user=' + slack_id;
		
		response = this.call_slack( httpMethod, apiMethod, payload );

		return JSON.stringify( JSON.parse( response ).profile );
	},
	
	
	
	
	/**************************************************************************************/
	
	get_user_name: function( userid ){
		var gr = new GlideRecord( this.table_users );
		gr.addQuery( 'slack_username', userid );
		gr.query();
		
		if( gr.next() ){
			return gr.getValue( 'first_name' ) + ' ' + gr.getValue( 'last_name' );
		}
		
		return null;
	},
	
	send_message: function( grPayload, text, force_thread ){
		var message, requestMessage;
		
		try{
			var apiMethod, httpMethod, payload, response;

			httpMethod = 'POST';
			apiMethod = 'chat.postMessage';

			response = this.call_slack( httpMethod, apiMethod, payload );

			return JSON.parse( response ).profile;
			
			requestMessage = new sn_ws.RESTMessageV2();
			requestMessage.setHttpMethod( 'POST' );
			requestMessage.setEndpoint( 'https://slack.com/api/chat.postMessage' );
			requestMessage.setRequestHeader( 'Content-Type', 'application/x-www-form-urlencoded' );
			requestMessage.setRequestHeader( 'Authorization', 'Bearer ' + this.property_slacker_token );


			message = [ '&channel=' + gs.urlEncode( grPayload.getValue( 'channel' ) ) ];
			
			if( !grPayload.thread.nil() ){
				message.push( '&thread_ts=' + gs.urlEncode( grPayload.getValue( 'thread' ) ) );
			} 
			else if( force_thread ){
				message.push( '&thread_ts=' + gs.urlEncode( grPayload.getValue( 'timestamp' ) ) );
			}
			
			message.push( '&text=' + gs.urlEncode( text ) );
			
			requestMessage.setRequestBody( message.join('') );
			return requestMessage.execute();
			
		}
		catch( e ){
			gs.error( 'Slacker: An error occurred sending a message to Slack.\nError: ' + e.name + ': ' + e.message );
			return null;
		}
	},
	
	check_user: function( slack_id ){
		/* Make sure the Slack user that sent a message has a matching user record in ServiceNow. */
		var response, response_body, requestMessage, slack_user_data, user_sys_id;
		
		try{	// Get the user's profile information from Slack
			
			requestMessage = new sn_ws.RESTMessageV2();
			requestMessage.setHttpMethod('GET');
			requestMessage.setRequestHeader( 'Content-Type', 'application/x-www-form-urlencoded' );
			requestMessage.setRequestHeader( 'Authorization', 'Bearer ' + this.property_slacker_token );
			requestMessage.setEndpoint( 'https://slack.com/api/users.profile.get?user=' + slack_id );
			response = requestMessage.execute();
			
			slack_user_data = JSON.parse( response.getBody() ).profile;
			
		}
		catch( e ){
			gs.error( 'Slacker: An error occurred retrieving user information from Slack.\nError: ' + e.name + ': ' + e.message );
			return null;
		}

		try{	// Check to see if the user already has a record in ServiceNow or create one

			grUser = new GlideRecord( this.table_users );
			grUser.addQuery( 'slack_username', slack_id );
			grUser.query();

			if( grUser.next() ){
				user_sys_id = grUser.getUniqueValue();
				grUser.setValue( 'email', slack_user_data.email );
				grUser.setValue( 'first_name', slack_user_data.first_name );
				grUser.setValue( 'last_name', slack_user_data.last_name );
				grUser.setValue( 'phone', slack_user_data.phone );
				grUser.setValue( 'title', slack_user_data.title );
				grUser.update();
			}
			else{
				grUser.initialize();
				grUser.setValue( 'slack_username', slack_id );
				grUser.setValue( 'email', slack_user_data.email );
				grUser.setValue( 'first_name', slack_user_data.first_name );
				grUser.setValue( 'last_name', slack_user_data.last_name );
				grUser.setValue( 'phone', slack_user_data.phone );
				grUser.setValue( 'title', slack_user_data.title );
				user_sys_id = grUser.insert();
			}
			
			return user_sys_id;
		}
		catch( e ){
			gs.error( 'Slacker: An error occurred trying to update or create the user in the ' + this.table_users + ' table.\nError: ' + e.name + ': ' + e.message );
			return null;
		}
		
	},
	
	isBotMessage: function( payload ){
		return payload.event.bot_id !== undefined;
	},
	
	check_boolean: function( value ){
		return value === 'false' ? false : value;
	},

	debug: function( message ){
		if( this.property_debug )
			gs.info( "Slacker: {0}", message );
	},
	
	error: function( message, error ){
		gs.error( "Slacker: {0}\nError: {1}: {2}", message, error.name, error.message );
	},
	

	
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>john.dahl</sys_created_by>
        <sys_created_on>2022-10-04 16:39:13</sys_created_on>
        <sys_id>9e2f3c1a979e95106b6050081153afbe</sys_id>
        <sys_name>Slacker</sys_name>
        <sys_package display_value="Demo Slacker" source="x_803922_demo_slac">09cdfc96979e95106b6050081153af8e</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Demo Slacker">09cdfc96979e95106b6050081153af8e</sys_scope>
        <sys_update_name>sys_script_include_9e2f3c1a979e95106b6050081153afbe</sys_update_name>
    </sys_script_include>
</record_update>
