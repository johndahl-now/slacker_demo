<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_803922_demo_slac.Slacker</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The main API for interacting with the Slack application.</description>
        <name>Slacker</name>
        <script><![CDATA[var Slacker = Class.create();
Slacker.prototype = {
    initialize: function(){
		this.app_scope = gs.getCurrentScopeName();
		this.table_users = this.app_scope + '_users';
		this.table_payload = this.app_scope + '_event_payload';
		this.table_command = this.app_scope + '_command';
		this.table_point = this.app_scope + '_point';
		this.property_slacker_token = this.get_property( 'demo.slacker.token' );
		this.property_debug = this.get_property( this.app_scope + '.debug', true );
    },

    type: 'Slacker',
	
	delete_thread: function( channel, timestamp ){
		/* 
		 * Given the timestamp of a root-level message that was deleted,
		 * Delete all messages where that timestamp is listed as a thread.
		 */
		
		this.debug( 'Starting to delete the thread ' + timestamp );
		
		var grPayload, payload, ts;
		grPayload = new GlideRecord( this.table_payload );
		grPayload.addQuery( 'thread', timestamp );
		grPayload.query();
		
		while( grPayload.next() ){
			ts = grPayload.getValue( 'timestamp' );
			payload = 'channel=' + channel + '&ts=' + ts;
			
			this.debug( 
				'Deleting message in the ' + channel + 
				' channel posted at ' + ts + ': ' + grPayload.getValue( 'text' ) 
			);
			
			this.call_slack( 'POST', 'chat.delete', payload );
		}
		
	},
	
	call_slack: function( http_method, api_method, payload, content_type ){
		/* Given the parapmeters for a REST API call,
		 * Call the Slack API method with the payload and 
		 * return the response as a string.
		 */
		var request, response;
		var token = this.property_slacker_token;
		
		switch( content_type ){
			case 'json':
				content_type = 'application/json';
				break;
			case 'text':
				content_type = 'application/text';
				break;
			default:
				content_type = 'application/x-www-form-urlencoded';
		}
		
		this.debug( 'API Request payload: ' + payload );
		
		try{
			request = new sn_ws.RESTMessageV2();
			request.setHttpMethod( http_method );
			request.setRequestHeader( 'Content-Type', content_type );
			request.setRequestHeader( 'Authorization', 'Bearer ' + token );
			request.setEndpoint( 'https://slack.com/api/' + api_method + '?' + payload );
			response = request.execute().getBody();
			this.debug( 'API Response: ' + response );

			return response;
		}
		catch( e ){
			this.error( 
				'An error occurred trying to call a Slack API.\nHTTP Method: ' + 
				http_method + '\nAPI Method: ' + api_method + '\nPayload: ' + payload 
			);
			return null;
		}
	},
	
	update_user: function( slack_id ){
		var slack_user_profile = JSON.parse( this.get_slack_user_profile( slack_id ) );
		
		this.debug( 'Update User: Slack Profile: ' + JSON.stringify( slack_user_profile, null, 2 ) );
		
		var grUser = new GlideRecord( this.table_users );
		grUser.addQuery( 'slack_username', slack_id );	
		grUser.query();
		
		var existing_user = grUser.next();
		
		if( !existing_user ){
			this.debug( 'Initializing a new record.' );
			
			grUser.initialize();
			grUser.setValue( 'slack_username', slack_id );
			grUser.setValue( 'points_total', 0 );
		}
		
		grUser.setValue( 'email', slack_user_profile.email );
		grUser.setValue( 'first_name', slack_user_profile.first_name );
		grUser.setValue( 'last_name', slack_user_profile.last_name );
		grUser.setValue( 'phone', slack_user_profile.phone );
		grUser.setValue( 'slack_profile', JSON.stringify( slack_user_profile, null, 2 ) );
		grUser.setValue( 'title', slack_user_profile.title );
		grUser.setValue( 'display_name', slack_user_profile.display_name || 
						[ slack_user_profile.first_name, slack_user_profile.last_name ].join(' ') );
		
		if( existing_user ){
			this.debug( 'Updating an existing record.' );
			
			return grUser.update();
		}
		else{
			this.debug( 'Inserting the new record.' );
			
			return grUser.insert();
		}
	},

	get_slack_user_profile: function( slack_id ){
		var httpMethod = 'GET';
		var apiMethod = 'users.profile.get';
		var payload = 'user=' + slack_id;
		
		var response = this.call_slack( httpMethod, apiMethod, payload );

		return JSON.stringify( JSON.parse( response ).profile );
	},
	
	send_message: function( grPayload, text, force_thread ){

		try{
			var response;

			var httpMethod = 'POST';
			var apiMethod = 'chat.postMessage';
			var message = [ '&channel=' + gs.urlEncode( grPayload.getValue( 'channel' ) ) ];
			
			if( !grPayload.thread.nil() ){
				message.push( '&thread_ts=' + gs.urlEncode( grPayload.getValue( 'thread' ) ) );
			} 
			else if( force_thread ){
				message.push( '&thread_ts=' + gs.urlEncode( grPayload.getValue( 'timestamp' ) ) );
			}
			
			message.push( '&text=' + gs.urlEncode( text ) );
			message = message.join('');

			this.debug( 'Sending a message to Slack: ' + message );
			response = this.call_slack( httpMethod, apiMethod, message );
			this.debug( 'Received a response from Slack: ' + response );
			
			return response;
		}
		catch( e ){
			gs.error( 'Slacker: An error occurred sending a message to Slack.\nError: ' + e.name + ': ' + e.message );
			return null;
		}
	},
	
	isBotMessage: function( payload ){
		return payload.event.bot_id !== undefined;
	},
	
	isBotUser: function( slack_id ){
		var gaUser = new GlideRecord( this.table_users );
		gaUser.get( 'slack_username', slack_id );
		return this.check_boolean( gaUser.getValue( 'bot' ) );
	},
	
	check_boolean: function( value ){
		return ( value === 'false' || value === '0' ) ? false : value;
	},
	
	get_property: function( property_name, boolean ){
		var prop = gs.getProperty( property_name );
		return boolean ? this.check_boolean( prop ) : prop;
	},

	debug: function( message ){
		if( this.property_debug )
			gs.info( "Slacker: {0}", message );
	},
	
	error: function( message, error ){
		gs.error( "Slacker: {0}\nError: {1}: {2}", message, error.name, error.message );
	},
	

	
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>john.dahl</sys_created_by>
        <sys_created_on>2022-10-04 16:39:13</sys_created_on>
        <sys_id>9e2f3c1a979e95106b6050081153afbe</sys_id>
        <sys_name>Slacker</sys_name>
        <sys_package display_value="Demo Slacker" source="x_803922_demo_slac">09cdfc96979e95106b6050081153af8e</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Demo Slacker">09cdfc96979e95106b6050081153af8e</sys_scope>
        <sys_update_name>sys_script_include_9e2f3c1a979e95106b6050081153afbe</sys_update_name>
    </sys_script_include>
</record_update>
